

--- .github/workflows/test.yml ---

name: Test
on:
  push:
  pull_request:
    types: [reopened]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -e ".[codestyle]"
      - name: Lint
        run: |
          isort --check-only .
          black --check .
          flake8 .
          pyupgrade --py37-plus **/*.py

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Django 2.2
          - django: "2.2"
            python: "3.7"
          - django: "2.2"
            python: "3.8"
          - django: "2.2"
            python: "3.9"
          # Django 3.0
          - django: "3.0"
            python: "3.7"
          - django: "3.0"
            python: "3.8"
          - django: "3.0"
            python: "3.9"
          # Django 3.1
          - django: "3.1"
            python: "3.7"
          - django: "3.1"
            python: "3.8"
          - django: "3.1"
            python: "3.9"
          # Django 3.2
          - django: "3.2"
            python: "3.7"
          - django: "3.2"
            python: "3.8"
          - django: "3.2"
            python: "3.9"
          - django: "3.2"
            python: "3.10"
          # Django 4.0
          - django: "4.0"
            python: "3.8"
          - django: "4.0"
            python: "3.9"
          - django: "4.0"
            python: "3.10"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          pip install -e ".[testing]"
          pip install "django~=${{ matrix.django }}"
      - name: Test
        run: pytest --cov-report=xml
      - uses: codecov/codecov-action@v2


--- .idea/django-samurai.iml ---

<?xml version="1.0" encoding="UTF-8"?>
<module type="PYTHON_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
  <component name="PyDocumentationSettings">
    <option name="format" value="PLAIN" />
    <option name="myDocStringFormat" value="Plain" />
  </component>
</module>

--- .pre-commit-config.yaml ---

repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.8
    hooks:
      # Run the linter
      - id: ruff
      # Run the formatter
      - id: ruff-format

--- LICENSE ---

MIT License

Copyright (c) 2024 Tanul Christian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- README.md ---

# Django Samurai
Purpose:
I want us to try to create a django library that combines views & templates, make the templates type-safe, and add file-based routing.Why?:
- It would make doing simple things simpler.
- An equivalent "modern" feel that you get when working with FastAPI, but when working with templates.
- It would pair super nicely with htmx.
- Why not.This idea is heavily inspired by Astro's .astro file extension syntax.How?:Lets see two examples of doing the same thing with a traditional setup, and with django-samurai:1. Traditional Setup
## urls.py
Define the /add-user-message route

from django.urls import path
from . import views

urlpatterns = [
    path('add-user-message/', views.add_user_message_view, name='add_user_message_view'),
]

## views.py
Get the message from form data, add HX-Trigger header to response

from django import forms
from django.shortcuts import render
from django.views.decorators.http import require_http_methods


@require_http_methods(["POST"])
def add_user_message_view(request):
	message = request.POST.get("message")
	context = {'message': message}
	headers = {'HX-Trigger': 'chatMessageAdded'}
    return render(request, context, headers=headers)

## template

    <div class="chat-message">
        <span>{{ message }}</span>
    </div>

2. django-samurai
```python
## views/add-user-message.py
# view logic goes here

response: HttpResponse
message: Form[str]

response.headers['HX-Trigger'] = 'chatMessageAdded'

"""
<!-- Response is the HTML defined here -->

<div class="chat-message">
	<span>{{ message }}</span>
</div>
"""
```

Explanation:
1. Route is defined using file-based routing:
	- <app>/views/add-user-message.py -> /add-user-message
2. message form data is retrieved using Form[str], like FastAPI/django-ninja (https://django-ninja.dev/guides/input/form-params/?h=form)
3. Response can be accessed and modified by having the response defined with response: HttpRespone. This would require some magic to work, but is doable.
4. The request could be accessed in the same way.
5. The returned response would always be an HTML template, which will be delimited/defined at the bottom of the file using triple quotes """You can think of these new files as view functions as files. Argument are defined using type hints, and the return value is always the HTML at the bottom.There's already an existing library that does 50% of what we need: https://github.com/jerivas/django-file-router/tree/main.
We can fork this and make it better.
We can also piggy back on django-ninja for the Pydantic validation.
The "magic"  would require most of the work.

## Installation

```
pip install django-samurai
```

Add this to your `urls.py`:

```python
from django_samurai import file_patterns

urlpatterns = [
	path("admin/", admin.site.urls),
	*file_patterns("myapp/views"),
]
```

With that single call to `file_patterns` the function will generate URL patterns for all your views automatically based on their folder structure inside `myapp/views`. For the file we created earlier at `myapp/views/mymodel/add.py` this will result in a url of `/mymodel/add`. Then by simply creating more files and folders the URL patterns will be updated without any manual input.

## Configuration

The `file_patterns` function accepts the following arguments:

| Arg | Description |
|---|---|
| `append_slash` | Boolean. If `True` will add a trailing slash to the generated patterns. |
| `exclude` | String (glob). If set each file will be checked against this pattern and excluded from the pattern generation process altogether. Useful if you want to completely avoid importing certain files (like tests). |

Alternatively you can add `url` and `urlname` properties to your `view`:

```python
def view(request):
    ...

view.url = "custom/url/path"
view.urlname = "my_custom_name"
```


--- demo/demo/__init__.py ---



--- demo/demo/migrations/0001_initial.py ---

# Generated by Django 4.0.1 on 2022-02-01 04:25

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Color",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(max_length=100)),
                ("code", models.CharField(max_length=8)),
            ],
        ),
    ]


--- demo/demo/migrations/__init__.py ---



--- demo/demo/models.py ---

from django.contrib import admin
from django.db import models


class Color(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)
    name = models.CharField(max_length=100)
    slug = models.SlugField(max_length=100)
    code = models.CharField(max_length=8)

    def __str__(self):  # pragma: nocover
        return self.name


admin.site.register(Color)


--- demo/demo/settings.py ---

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p3alp*@far!9w*%bf*0va9e^3*pc)@c4^1gvd^%8nalwb4n_cr"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "demo",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "demo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "demo.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


--- demo/demo/urls.py ---

from django.contrib import admin
from django.urls import path

from django_samurai import file_patterns

urlpatterns = [
    path("admin/", admin.site.urls),
    *file_patterns("demo/views"),
]


--- demo/demo/views/__init__.py ---

"""
<h1>Hello 👋</h1>

<p>Here are some links:</p>
<ul>
    <li><a href="{% url 'colors' %}">Colors</a></li>
    <li><a href="{% url 'current_time' %}">Current Time</a></li>
</ul>
"""

from django_samurai import render_str


def view(request):
    return render_str(__doc__, request)


view.urlname = "home"


--- demo/demo/views/colors/<slug:slug>.py ---

"""
<h1>{{ color.name }}</h1>
<p>The code is {{ color.code }}</p>
"""

from django.shortcuts import get_object_or_404

from demo.models import Color
from django_samurai import render_str


def view(request, slug):
    color = get_object_or_404(Color, slug=slug)
    return render_str(__doc__, request, {"color": color})


--- demo/demo/views/colors/__init__.py ---

"""
<h1>Here's a list of all colors</h1>

<ul>
    {% for color in colors %}
        <li><a href="{% url 'colors_slug' color.slug %}">{{ color.name }}</a></li>
    {% endfor %}
</ul>

<p><a href="{% url 'colors_add' %}">Add a new color</a></p>
"""

from demo.models import Color
from django_samurai import render_str


def view(request):
    colors = Color.objects.all()
    return render_str(__doc__, request, {"colors": colors})


--- demo/demo/views/colors/add.py ---

"""
<h1>Add a new color</h1>

<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit">
</form>
"""

from django import forms
from django.shortcuts import redirect
from django.template.defaultfilters import slugify

from demo.models import Color
from django_samurai import render_str


class ColorAddForm(forms.ModelForm):
    class Meta:
        model = Color
        fields = ("name", "code")

    def clean_name(self):
        name = self.cleaned_data["name"]
        if Color.objects.filter(name__iexact=name).exists():
            raise forms.ValidationError("Name already taken!")
        return name

    def save(self, commit=True):
        self.instance.slug = slugify(self.instance.name)
        return super().save(commit)


def view(request):
    form = ColorAddForm(request.POST or None)
    if request.method == "POST" and form.is_valid():
        color = form.save()
        return redirect("colors_slug", color.slug)
    return render_str(__doc__, request, {"form": form})


--- demo/demo/views/current-time.py ---

"""
The current datetime is {% now "DATETIME_FORMAT" %}
"""

from django_samurai import render_str


def view(request):
    return render_str(__doc__, request)


--- demo/demo/views/not-a-view.py ---

"""
This file shouldn't produce a URL pattern because it doesn't expose a `view` callable
"""


--- demo/demo/views_test.py ---

from pathlib import Path

import pytest
from django.urls import NoReverseMatch, reverse

from demo.models import Color


@pytest.fixture(autouse=True)
def change_test_dir(monkeypatch):
    """
    For these tests change the CWD to the Django project root. This ensures the
    view folder location works as expected in the call to `file_patterns` in
    `urls.py`, even when pytest is called from the repo root.
    """
    monkeypatch.chdir(str(Path(__file__).parent.parent))


@pytest.fixture
def color():
    return Color.objects.create(name="Foo Color", slug="foo", code="00ff00")


def test_not_a_view(client):
    with pytest.raises(NoReverseMatch):
        reverse("not_a_view")

    response = client.get("/not-a-view")
    assert response.status_code == 404


def test_home(client):
    url = reverse("home")
    assert (
        url == "/"
    ), "Expected the file `views/__init__.py` to produce the url `/` with the name `home`"

    response = client.get(url)
    assert response.status_code == 200


def test_current_time(client):
    url = reverse("current_time")
    assert (
        url == "/current-time"
    ), "Expected the file `views/current-time.py` to produce the url `/current-time` with the name `current_time`"

    response = client.get(url)
    assert response.status_code == 200


@pytest.mark.django_db
def test_colors(client, color):
    url = reverse("colors")
    assert (
        url == "/colors"
    ), "Expected the file `views/colors/__init__.py` to produce the url `/colors` with the name `colors`"

    response = client.get(url)
    assert response.status_code == 200
    assert color.name in str(response.content)


@pytest.mark.django_db
def test_colors_slug(client, color):
    url = reverse("colors_slug", args=[color.slug])
    assert (
        url == "/colors/foo"
    ), "Expected the file `views/colors/<slug:slug>.py` to produce the url `/colors/<slug:slug>` with the name `colors_slug`"

    response = client.get(url)
    assert response.status_code == 200
    assert color.name in str(response.content)
    assert color.code in str(response.content)


@pytest.mark.django_db
class TestColorsAdd:
    def test_get(self, client):
        url = reverse("colors_add")
        assert (
            url == "/colors/add"
        ), "Expected the file `views/colors/add.py` to produce the url `/colors/add` with the name `colors_add`"

        response = client.get(url)
        assert response.status_code == 200
        assert b'<input type="text" name="name"' in response.content
        assert b'<input type="text" name="code"' in response.content

    def test_post(self, client):
        url = reverse("colors_add")

        response = client.post(url, data={"name": "Red", "code": "ff0000"})

        assert response.status_code == 302
        assert Color.objects.filter(name="Red", code="ff0000", slug="red").exists()

    def test_post__duplicate_name(self, client, color):
        url = reverse("colors_add")

        response = client.post(url, data={"name": color.name, "code": "ff0000"})

        assert response.status_code == 200
        assert b"Name already taken!" in response.content
        assert Color.objects.count() == 1


--- demo/demo/wsgi.py ---

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "demo.settings")

application = get_wsgi_application()


--- demo/manage.py ---

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""

import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "demo.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


--- demo/requirements.txt ---

django>=4,<4.1
-e ..


--- django_samurai/__init__.py ---

import pathlib
import re
from importlib import import_module

from django.http import HttpResponse
from django.template import RequestContext
from django.template.base import Template
from django.urls import path

__version__ = "0.4.0"

DISALLOWED_CHARS = re.compile(
    "|".join(
        [
            r"^_+",  # Leading underscores
            r"[<>]",  # Angle brackets (url param wrapper)
            r"\w+\:",  # Letters followed by colon (path converters)
            r"_+$",  # Trailing underscores
        ]
    )
)
TO_UNDERSCORES = re.compile("[/-]")  # Slash and dash


def file_patterns(start_dir: str, append_slash: bool = False, exclude: str = ""):
    """
    Create urlpatterns from a directory structure
    """
    patterns = []
    start_dir_re = re.compile(f"^{start_dir}")
    files = pathlib.Path(start_dir).glob("**/*.py")
    # Reverse-sort the list so files that start with "<" go to the bottom
    # and regular files come to the top. This ensures hard-coded url params
    # always match before variable ones like <pk> and <slug>
    files = sorted(files, reverse=True, key=str)
    for file in files:
        if exclude and pathlib.Path.match(file, exclude):
            continue

        module_path = str(file).replace(".py", "").replace("/", ".")
        module = import_module(module_path)
        view_fn = getattr(module, "view", None)
        if not callable(view_fn):
            continue

        try:
            url = view_fn.url
        except AttributeError:
            url = "" if file.name == "__init__.py" else file.name.replace(".py", "")
            url = start_dir_re.sub("", f"{file.parent}/{url}").strip("/")
            url = (url + "/") if append_slash and url != "" else url

        try:
            urlname = view_fn.urlname
        except AttributeError:
            urlname = DISALLOWED_CHARS.sub("", TO_UNDERSCORES.sub("_", url))

        patterns.append(path(url, view_fn, name=urlname))
    return patterns


def render_str(source, request, context=None):
    """
    Take a string and respond with a fully rendered template
    """
    rendered = Template(source).render(RequestContext(request, context))
    return HttpResponse(rendered)


--- django_samurai/file_router_test.py ---

import shutil

import pytest

from . import file_patterns


@pytest.fixture(scope="session", autouse=True)
def copy_views():
    """Copy the views folder of the demo project to this folder"""
    shutil.copytree("demo/demo/views", "views")
    yield
    shutil.rmtree("views")


def test_append_slash():
    patterns = file_patterns("views", append_slash=True, exclude="")
    output = [(str(p.pattern), p.name) for p in patterns]
    assert output == [
        ("current-time/", "current_time"),
        ("colors/add/", "colors_add"),
        ("colors/", "colors"),
        ("colors/<slug:slug>/", "colors_slug"),
        ("", "home"),
    ]


def test_exclude():
    patterns = file_patterns("views", append_slash=False, exclude="*-time.py")
    output = [(str(p.pattern), p.name) for p in patterns]
    assert output == [
        ("colors/add", "colors_add"),
        ("colors", "colors"),
        ("colors/<slug:slug>", "colors_slug"),
        ("", "home"),
    ]


--- Project Hierarchy ---

.github/workflows/test.yml
.idea/django-samurai.iml
.pre-commit-config.yaml
LICENSE
README.md
demo/demo/__init__.py
demo/demo/migrations/0001_initial.py
demo/demo/migrations/__init__.py
demo/demo/models.py
demo/demo/settings.py
demo/demo/urls.py
demo/demo/views/__init__.py
demo/demo/views/colors/<slug:slug>.py
demo/demo/views/colors/__init__.py
demo/demo/views/colors/add.py
demo/demo/views/current-time.py
demo/demo/views/not-a-view.py
demo/demo/views_test.py
demo/demo/wsgi.py
demo/manage.py
demo/requirements.txt
django_samurai/__init__.py
django_samurai/file_router_test.py